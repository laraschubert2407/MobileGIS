import React from 'react';
import {
  Modal,
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from 'react-native';

const updateStoerung = async (stationName, value = true) => {
  const xml = `
<wfs:Transaction service="WFS" version="1.0.0"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:mobilegis="mobilegis"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.opengis.net/wfs
 https://mobilegisserver.mywire.org:8443/geoserver/schemas/wfs/1.0.0/WFS-transaction.xsd">
  <wfs:Update typeName="mobilegis:group5all_stations_alle_linien">
    <wfs:Property>
      <wfs:Name>mobilegis:in_betrieb</wfs:Name>
      <wfs:Value>${value}</wfs:Value>  
    </wfs:Property>
    <ogc:Filter>
      <ogc:PropertyIsEqualTo>
        <ogc:PropertyName>name</ogc:PropertyName>
        <ogc:Literal>${stationName}</ogc:Literal>
      </ogc:PropertyIsEqualTo>
    </ogc:Filter>
  </wfs:Update>
</wfs:Transaction>
`;

  try {
    const res = await fetch('https://mobilegisserver.mywire.org:8443/geoserver/wfs', {
      method: 'POST',
      headers: {
        'Content-Type': 'text/xml',
      },
      body: xml,
    });

    const text = await res.text();
    if (res.ok && text.includes('<wfs:SUCCESS')) {
      Alert.alert(
        'Erfolg',
        `Störung ${value ? 'zurückgezogen' : 'gemeldet'} für ${stationName}`
      );
    } else {
      Alert.alert('Fehler', 'Beim Aktualisieren ist etwas schiefgelaufen.');
    }
  } catch (err) {
    Alert.alert('Verbindungsfehler', err.message);
  }
};

export default function ReportIssueModal({ visible, onClose, stationName, featureId }) {
  return (
    <Modal
      animationType="slide"
      transparent
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.overlay}>
        <View style={styles.modalContainer}>
          <Text style={styles.title}>Störung melden</Text>
          <Text style={styles.subtitle}>Station: {stationName}</Text>

          <TouchableOpacity
            style={styles.button}
            onPress={() => {
              updateStoerung(stationName, false); // false = in_betrieb auf false
              onClose();
            }}
          >
            <Text style={styles.buttonText}>Störung melden</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.cancelIssueButton]}
            onPress={() => {
              updateStoerung(stationName, true); // true = wieder in Betrieb
              onClose();
            }}
          >
            <Text style={styles.buttonText}>Störung zurückziehen</Text>
          </TouchableOpacity>

          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <Text style={styles.closeText}>Abbrechen</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: '#000000aa',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 12,
    width: '80%',
    alignItems: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#e41a1c',
    padding: 12,
    borderRadius: 8,
    marginBottom: 10,
    width: '100%',
  },
  buttonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: 'bold',
  },
  closeButton: {
    padding: 8,
  },
  closeText: {
    color: '#333',
  },
  cancelIssueButton: {
    backgroundColor: '#999',
  },
});
